{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","React","Component","Track","addTrack","removeTrack","isRemoval","onClick","onAdd","track","onRemove","name","album","artist","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTrack","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expireIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","response","json","jsonResponse","item","artists","uri","url","savePlaylist","trackUris","length","userId","then","method","bosy","JSON","stringify","playlistId","uris","App","playlistName","playlistTracks","updatePlaylistName","find","savedTrack","push","filter","currentTrack","alert","trackURIs","console","log","searchResult","plylistName","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6bca3347.chunk.js","sourcesContent":["\nlet accessToken;\nconst clientId = '***************';\nconst redirectUri = 'https://bhagya099.github.io/jamming-react-app/';\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        }\n            const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n            const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1];\n            const expireIn = Number(expiresInMatch[1]);\n            // this clear the parameters allowing us to grab a new access token when it expires\n            window.setTimeout(() => accessToken = '', expireIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`\n            window.location = accessUrl;\n              }\n    },\n    async search(term) {\n        const accessToken = Spotify.getAccessToken();\n        const response = await fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\n            {\n                headers: {\n                    Authorization: `Bearer ${accessToken}`\n                }\n            });\n        const jsonResponse = await response.json();\n        if (!jsonResponse.tracks) {\n            return [];\n        }\n        return jsonResponse.tracks.item.map((track) => ({\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.url\n        }));\n    },\n\n    savePlaylist(name, trackUris) {\n        if (!name || !trackUris.length) { return; }\n        \n        const accessToken = Spotify.getAccessToken() ;\n        const headers = { Authorization: `Bearer ${accessToken}` };\n        let userId;\n\n        return fetch('https://api.spotify.com/v1/me', { headers: headers }\n        ).then(response =>response.json()\n        ).then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n                headers: headers,\n                method: 'POST',\n                bosy:JSON.stringify({name:name})\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n                return fetch(`/v1/users/${userId}/playlists/${playlistId}/tracks\n                `, {\n                    headers: headers,\n                    method: 'POST',\n                    bosy : JSON.stringify({uris: trackUris})\n                })\n            })\n        })\n    }\n       \n}\n           \n\n\nexport default Spotify;","import React from 'react';\nimport './SearchBar.css'\n\nexport class SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state ={term:''}\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n  }\n    search() {\n        this.props.onSearch(this.state.term)\n    }\n\n    handleTermChange(event) {\n        this.setState({\n                     term:event.target.value  \n                   })\n    }\n\n    render() {\n        return (\n        <div className=\"SearchBar\">\n                <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange}/>\n            <button className=\"SearchButton\">SEARCH</button>\n          </div>\n        );\n    }\n}","import React from 'react';\nimport './Track.css';\n\nexport default class Track extends React.Component {\n    constructor(props) {\n        super(props);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n\n    renderAction() {\n        if (this.props.isRemoval) {\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n        } else {\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\n        }\n    }\n    \n    addTrack() {\n         this.props.onAdd(this.props.track)\n    }\n    \n    removeTrack() {\n        this.props.onRemove(this.props.track)\n    }\n\n    render() {\n        return (\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3>{this.props.track.name}</h3>\n                    <p>{this.props.track.album} | {this.props.track.artist}</p>\n                </div>\n                {this.renderAction()}\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track' \n\nexport default class TrackList extends React.Component {\n    render() {\n        return (\n            <div className=\"TrackList\">\n                {\n                    this.props.tracks.map((track) => {\n                        return <Track track={track}\n                            key={track.id}\n                            onAdd={this.props.onAdd}\n                            onRemove={this.props.onRemove}\n                            isRemoval={this.props.isRemoval}\n                        />\n                 })}\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './SearchResult.css';\nimport TrackList  from '../TrackList/TrackList';\n\nexport default class SearchResults extends React.Component {\n    render() {\n        return (\n            <div className=\"SearchResults\">\n                 <h2>Results</h2>\n                {/* Add a TrackList component */}\n                <TrackList tracks={this.props.searchResults}\n                    onAdd={this.props.onAdd}\n                    isRemoval = {false}\n                />\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\n\nexport default class Playlist extends React.Component {\n   \n    constructor(props) {\n        super(props);\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n\n    handleNameChange(event) {\n       this.props.onNameChange(event.target.value)\n   }\n\n    render() {\n        return (\n            <div className=\"Playlist\">\n                <input defaultValue={\"New Playlist\"}\n                   onChange={this.handleNameChange}\n                />\n                \n                <TrackList\n                    tracks={this.props.playlistTrack}\n                    onRemove={this.props.onRemove}\n                    isRemoval={true}\n                />\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport { SearchBar } from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify'\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'My Playlist',\n      playlistTracks : []\n    }\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n    \n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks; \n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    } else {\n      tracks.push(track);\n      this.setState({\n        playlistTracks: tracks\n      })\n      }\n  } \n   \n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n    this.setState({\n      playlistTracks: tracks\n       })\n  }\n  \n  updatePlaylistName(name) {\n    this.setState({\n          playlistName:name\n        })\n  }\n  \n  savePlaylist() {\n    alert(\"this method is linked correctly\")\n    const trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks:[]\n      })\n    })\n  }\n\n  search(term) {\n    console.log(term);\n    Spotify.search(term).then(searchResult => \n      this.setState({\n        searchResults : searchResult\n      }))\n   }\n\n  render()\n  {\n          return (\n            <div>\n                <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n              <div className=\"App\">\n                 {/* Add a SearchBar component */}\n                <SearchBar onSearch={this.search}/>\n                <div className=\"App-playlist\">\n                  {/* Add a SearchResults component  */}\n                  <SearchResults searchResults={this.state.searchResults}\n                     onAdd = {this.addTrack}\n                  />\n                  {/* Add a Playlist component  */}\n                  <Playlist plylistName={this.state.playlistName}\n                    playlistTrack={this.state.playlistTracks}\n                    onRemove={this.removeTrack}\n                    onNameChange={this.updatePlaylistName}\n                    onSave = {this.savePlaylist}\n                  />\n                </div>\n              </div>\n            </div>\n    );\n  }\n}\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}